language: cpp
compiler: clang

os:
  - linux
  - osx

dist: trusty

env:
  global:
    - STORAGE_HOSTNAME=frs.sourceforge.net
    - VERSION=1.0.1
    - UPLOAD_BUILD=0

matrix:
  include:
    - os: linux
      compiler: gcc
      env: UPLOAD_BUILD=1
    - os: osx
      compiler: clang
      env: UPLOAD_BUILD=1
  allow_failures:
    # FIXME: Qt bugs
    - os: linux
      compiler: clang

addons:
  ssh_known_hosts:
    - ${STORAGE_HOSTNAME}
  apt:
    sources:
      - wily
      - ubuntu-sdk-team
      - ubuntu-toolchain-r-test
      - llvm-toolchain-precise-3.6
    packages:
      - qtbase5-dev
      - qtdeclarative5-dev
      - libqt5webkit5-dev
      - libsqlite3-dev
      - qt5-default
      - qttools5-dev-tools
      - fakeroot
      - libimobiledevice-dev
      - libimobiledevice-utils
      - g++-5
      - clang-3.6
      - lintian
      - cppcheck
      - libusb-1.0-0-dev
      - libudev-dev

before_install:
  - pwd
  - ls -al
  - openssl aes-256-cbc -K $encrypted_59f5247592cb_key -iv $encrypted_59f5247592cb_iv -in ci-scripts/secrets.tar.enc -out secrets.tar -d
  - uname -a;
  - if [ $TRAVIS_OS_NAME = linux ]; then
        cat /etc/*release;
        cat /proc/cpuinfo;
        tar xvf secrets.tar -C /home/travis/.ssh/;
    elif [ $TRAVIS_OS_NAME = osx ]; then
        brew update;
        ci-scripts/fix_brew.sh;
        tar xvf secrets.tar -C /Users/travis/.ssh/;
    fi
  - $CXX --version
  - set -e

install:
  - ls -al ~
  - ls -al ~/.ssh
  - if [ $TRAVIS_OS_NAME = osx ]; then
        ls -al /Applications;
        cat ~/.ssh_host_rsa_key.pub;

        brew install -v android-platform-tools libimobiledevice libusb p7zip qt5 cppcheck;

        echo "${PATH}";
        QTDIR=$(brew info qt5 | grep '/Cellar/' | awk '{print $1}');
        PATH="${QTDIR}/bin:${PATH}";
        echo "${PATH}";
        ls -l "${QTDIR}";
        ls -l "${QTDIR}/bin";
    fi

script:
  - source ci-scripts/set_env.sh
  - cd "${PROGRAMNAME}/tests"
  - if [ $TRAVIS_OS_NAME = linux ]; then
        if [ $CXX = "g++" ]; then
            qmake -spec linux-g++;
            cd ..;
            qmake -spec linux-g++ 'CONFIG += release';
        fi;
        if [ $CXX = "clang++" ]; then
            qmake -spec linux-clang;
            cd ..;
            qmake -spec linux-clang 'CONFIG += release';
        fi;
    elif [ $TRAVIS_OS_NAME = osx ]; then
        if [ $CXX = "g++" ]; then
            qmake -spec macx-g++;
            cd ..;
            qmake -spec macx-g++ 'CONFIG += release';
        fi;
        if [ $CXX = "clang++" ]; then
            qmake -spec macx-clang;
            cd ..;
            qmake -spec macx-clang 'CONFIG += release';
        fi;
    fi
  - echo "${PATH}"
  - make -j2
  - cppcheck --verbose --quiet --std=c++11 --enable=all --error-exitcode=1 --force . || echo failed
  - cd ..
  - ls -l "${PROGRAMNAME}"
  - if [ $TRAVIS_OS_NAME = linux ]; then
        strip --remove-section=.comment "${PROGRAMNAME}/${PROGRAMNAME}";
        file "${PROGRAMNAME}/${PROGRAMNAME}";
        ldd "${PROGRAMNAME}/${PROGRAMNAME}";

        export OUTPUT_FILENAME="${OUTPUT_DIRECTORY}.deb";
        ./ci-scripts/build_deb.sh;
        lintian -i -I --show-overrides "${OUTPUT_FILENAME}" && echo ok || echo failed;
    elif [ $TRAVIS_OS_NAME = osx ]; then
        function copy_3rdparty() {
            THIRD_PARTY_NAME="$1";
            THIRD_PARTY_DIR="$2";
            PROGRAM_DIR=$(brew info "${THIRD_PARTY_NAME}" | grep '/Cellar/' | awk '{print $1}');
            cp -av "${PROGRAM_DIR}" "${THIRD_PARTY_DIR}/${THIRD_PARTY_NAME}";
            ls -l "${THIRD_PARTY_DIR}/${THIRD_PARTY_NAME}";
        };
        APP_DIR="${PROGRAMNAME}/${PROGRAMNAME}.app";
        EXECFILE="${APP_DIR}/Contents/MacOS/${PROGRAMNAME}";
        file "${EXECFILE}";
        otool -L "${EXECFILE}";

        THIRD_PARTY_DIR="${APP_DIR}/Contents/MacOS/3rdparty";
        mkdir "${THIRD_PARTY_DIR}";
        copy_3rdparty android-platform-tools "${THIRD_PARTY_DIR}";
        copy_3rdparty libimobiledevice "${THIRD_PARTY_DIR}";

        macdeployqt "${APP_DIR}" -dmg -verbose=3;
        ls -la;
        ls -la "${PROGRAMNAME}";
        sudo chown travis:staff "${PROGRAMNAME}/${PROGRAMNAME}.dmg";
        export OUTPUT_FILENAME="${OUTPUT_DIRECTORY}.dmg";
        mv -v "${PROGRAMNAME}/${PROGRAMNAME}.dmg" "${OUTPUT_FILENAME}";
    fi
  - ls -l

after_success:
  - if [ $TRAVIS_OS_NAME = linux ]; then
        MD5_SUM=$(md5sum "${OUTPUT_FILENAME}" | awk '{print $1}');
        SHA1_SUM=$(sha1sum "${OUTPUT_FILENAME}" | awk '{print $1}');
        SHA512_SUM=$(sha512sum "${OUTPUT_FILENAME}" | awk '{print $1}');
    elif [ $TRAVIS_OS_NAME = osx ]; then
        MD5_SUM=$(md5 "${OUTPUT_FILENAME}" | awk '{print $4}');
        SHA1_SUM=$(shasum -a 1 "${OUTPUT_FILENAME}" | awk '{print $1}');
        SHA512_SUM=$(shasum -a 512 "${OUTPUT_FILENAME}" | awk '{print $1}');
    fi
  - echo -n "md5 "; echo "${MD5_SUM}";
    echo -n "sha1 "; echo "${SHA1_SUM}";
    echo -n "sha512 "; echo "${SHA512_SUM}";
  - if [ $UPLOAD_BUILD = 1 ]; then
        OS_NAME="${TRAVIS_OS_NAME}";
        if [ $OS_NAME = "linux" ]; then
            OS_NAME="ubuntu";
        fi;
        STORAGE_URL="${STORAGE_USER_AND_PATH}/${OS_NAME}/";
        scp -B -v -o "StrictHostKeyChecking no" "${OUTPUT_FILENAME}" "${STORAGE_URL}";
        ci-scripts/remove_old_builds.sh "${STORAGE_URL}";
    fi

# vim: textwidth=0:shiftwidth=2:softtabstop=2:tabstop=2
